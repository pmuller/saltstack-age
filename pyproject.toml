[project]
name = "saltstack-age"
version = "0.4.0"
description = "age renderer for Saltstack"
authors = [{ name = "Philippe Muller" }]
dependencies = [
    "pyrage>=1.1.2",
]
readme = "README.md"
requires-python = ">= 3.8"
license = {text = "MIT License"}
keywords = ["saltstack", "salt", "pillar", "age", "encryption", "security"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Security",
    "Topic :: System :: Systems Administration",
]

[project.urls]
Homepage = "https://github.com/pmuller/saltstack-age"
Repository = "https://github.com/pmuller/saltstack-age.git"
Issues = "https://github.com/pmuller/saltstack-age/issues"
Changelog = "https://github.com/pmuller/saltstack-age/blob/main/CHANGELOG.md"

[tool.rye]
managed = true
dev-dependencies = [
    "ipython>=8.23.0",
    "pytest>=8.1.2",
    "pytest-salt-factories>=1.0.1",
    "salt>=3007.0",
    "basedpyright>=1.10.4",
    "ruff>=0.4.2",
]

[project.scripts]
saltstack-age = "saltstack_age.cli:main"

[project.entry-points."salt.loader"]
saltstack-age = "saltstack_age"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/saltstack_age"]

[tool.hatch.metadata]
allow-direct-references = true

[tool.ruff]
builtins = ["__salt__"]

[tool.ruff.lint]
select = [
    "F",     # [F]lake8
    "E",     # pycodestyle (E)rrors
    "W",     # pycodestyle (W)rrors
    "C90",   # mccabe
    "I",     # [I]sort
    "N",     # pep8-[N]aming
    "D",     # py[D]ocstyle
    "UP",    # py[UP]grade
    "YTT",   # flake8-2020
    "ANN",   # flake8-[ANN]otations
    "ASYNC", # flake8-async
    "S",     # flake8-bandit
    "BLE",   # flake8-blind-except
    "FBT",   # flake8-boolean-trap
    "B",     # flake8-bugbear
    "A",     # flake8-builtins
    "COM",   # flake8-commas
    "C4",    # flake8-comprehensions
    "DTZ",   # flake8-datetimez
    "T10",   # flake8-debugger
    "EXE",   # flake8-executable
    "ISC",   # flake8-implicit-str-concat
    "G",     # flake8-logging-format
    "PIE",   # flake8-pie
    "T20",   # flake8-print
    "PYI",   # flake8-pyi
    "PT",    # flake8-pytest-style
    "Q",     # flake8-quotes
    "RSE",   # flake8-raise
    "RET",   # flake8-return
    "SLF",   # flake8-self
    "SLOT",  # flake8-slots
    "SIM",   # flake8-simplify
    "TCH",   # flake8-type-checking
    "ARG",   # flake8-unused-arguments
    "PTH",   # flake8-use-pathlib
    "ERA",   # eradicate
    "PD",    # pandas-vet
    "PL",    # Pylint
    "TRY",   # tryceratops
    "FLY",   # flynt
    "PERF",  # Perflint
    "LOG",   # flake8-logging
    "RUF",   # Ruff-specific rules
]
ignore = [
    # Avoid enforcing line-length violations, just trust "ruff format"
    "E501",
    # Avoid conflict with the formatter
    "COM812", # missing-trailing-comma
    "ISC001", # single-line-implicit-string-concatenation
    # Can live without the following checks
    "D100",   # Missing docstring in public module
    "D101",   # Missing docstring in public class
    "D102",   # Missing docstring in public method
    "D103",   # Missing docstring in public function
    "D104",   # Missing docstring in public package
    "D106",   # Missing docstring in public nested class
    "D107",   # Missing docstring in `__init__`
    "D203",   # one-blank-line-before-class
    "D212",   # multi-line-summary-first-line
    "ANN101", # Missing type annotation for `self` in method
    "ANN102", # Missing type annotation for `cls` in classmethod
    "ANN204", # Missing return type annotation for special method `__init__`
    "TRY002", # Create your own exception
    "TRY003", # Avoid specifying long messages outside the exception class
    "S603",   # `subprocess` call: check for execution of untrusted input
    "S607",   # Starting a process with a partial executable path
]

[tool.ruff.lint.per-file-ignores]
"typings/**.py" = [
    "ARG001", # Unused function argument
]
"tests/**.py" = [
    "S101",   # Use of `assert` detected
]

[tool.basedpyright]
reportAny = false
reportImplicitStringConcatenation = false
